% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/use.R, R/vex.R
\name{use_vex}
\alias{use_vex}
\alias{vex}
\alias{vex_confirm}
\title{Alert and confirm with vex.js}
\usage{
use_vex(
  theme = c("default", "os", "plain", "top", "wireframe", "bottom-right-corner",
    "flat-attack")
)

vex(
  content,
  showCloseButton = TRUE,
  escapeButtonCloses = TRUE,
  overlayClosesOnClick = TRUE,
  session = shiny::getDefaultReactiveDomain()
)

vex_confirm(
  inputId,
  content,
  yes_text = "Ok",
  no_text = "Cancel",
  showCloseButton = FALSE,
  escapeButtonCloses = FALSE,
  overlayClosesOnClick = FALSE,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{theme}{Theme to use. Choose between \code{"default"}, \code{"os"},
\code{"plain"}, \code{"top"}, \code{"wireframe"}, 
\code{"bottom-right-corner"}, \code{"flat-attack"}}

\item{content}{Text to display in the alert.}

\item{showCloseButton}{Show or not a button to close alert.}

\item{escapeButtonCloses}{Close alert when pressing escape button.}

\item{overlayClosesOnClick}{Close alert when clicking outside alert.}

\item{session}{Shiny session.}

\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{yes_text}{Text to display on 'yes' button.}

\item{no_text}{Text to display on 'no' button.}
}
\description{
Initialize with \code{use_vex} in UI before
 using \code{vex} (alert) or \code{vex_confirm} (confirmation dialog) server-side.
 Retrieve value server-side with \code{input$<inputId>} for \code{vex_confirm}.
}
\examples{
library(shiny)
library(shinypop)

ui <- fluidPage(
  tags$h2("Alert with vex example"),
  use_vex(),
  actionButton("launch", "Launch an alert")
)

server <- function(input, output, session) {
  
  observeEvent(input$launch, {
    vex(tags$div(
      style = "text-align: center;",
      tags$h3("Attention"),
      tags$br(),
      tags$p("This alert was sent from the server,"),
      tags$p("probably something went", tags$b("wrong"))
    ))
  })
  
}

if (interactive()) 
  shinyApp(ui, server)


### Confirm ####' 

if (interactive()) {
  library(shiny)

  ui <- fluidPage(
    tags$h2("Confirm with vex example"),
    use_vex(theme = "flat-attack"),
    actionButton("ask", "Ask confirmation"),
    verbatimTextOutput(outputId = "result")
  )

  server <- function(input, output, session) {

    observeEvent(input$ask, {
      vex_confirm(
        inputId = "confirm", 
        content = tags$div(
          style = "text-align: center;",
          "Are your sure?"
        ), 
        yes_text = "Yep! I'm sure", 
        no_text = "Nope, cancel!"
      )
    })
    
    output$result <- renderPrint({
      input$confirm
    })

  }

  shinyApp(ui, server)
}
}
