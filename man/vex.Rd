% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/use.R, R/vex.R
\name{use_vex}
\alias{use_vex}
\alias{vex}
\title{Alert with vex.js}
\usage{
use_vex(theme = c("default", "os", "plain", "top", "wireframe",
  "bottom-right-corner", "flat-attack"))

vex(content, showCloseButton = TRUE, escapeButtonCloses = TRUE,
  overlayClosesOnClick = TRUE,
  session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{theme}{Theme to use. Choose between \code{"default"}, \code{"os"},
\code{"plain"}, \code{"top"}, \code{"wireframe"}, 
\code{"bottom-right-corner"}, \code{"flat-attack"}}

\item{content}{Text to display in the alert.}

\item{showCloseButton}{Show or not a button to close alert.}

\item{escapeButtonCloses}{Close alert when pressing escape button.}

\item{overlayClosesOnClick}{Close alert when clicking outside alert.}

\item{session}{Shiny session.}
}
\description{
Alert with vex.js
}
\examples{

### Alert ###

if (interactive()) {
  library(shiny)
  
  ui <- fluidPage(
    tags$h2("Alert with vex example"),
    use_vex(),
    actionButton("launch", "Launch an alert")
  )
  
  server <- function(input, output, session) {
    
    observeEvent(input$launch, {
      vex(tags$div(
        style = "text-align: center;",
        tags$h3("Attention"),
        tags$br(),
        tags$p("This alert was sent from the server,"),
        tags$p("probably something went", tags$b("wrong"))
      ))
    })
    
  }
  
  shinyApp(ui, server)
}
}
