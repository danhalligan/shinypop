% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/notiflix.R, R/use.R
\name{notiflix-report}
\alias{notiflix-report}
\alias{nx_report_success}
\alias{nx_report_error}
\alias{nx_report_info}
\alias{nx_report_warning}
\alias{use_notiflix_report}
\title{Report with notiflix.js}
\usage{
nx_report_success(
  title,
  message,
  button = "Ok",
  session = shiny::getDefaultReactiveDomain()
)

nx_report_error(
  title,
  message,
  button = "Ok",
  session = shiny::getDefaultReactiveDomain()
)

nx_report_info(
  title,
  message,
  button = "Ok",
  session = shiny::getDefaultReactiveDomain()
)

nx_report_warning(
  title,
  message,
  button = "Ok",
  session = shiny::getDefaultReactiveDomain()
)

use_notiflix_report(
  backgroundColor = "#f8f8f8",
  borderRadius = "25px",
  backOverlay = TRUE,
  backOverlayColor = "rgba(0,0,0,0.5)",
  titleFontSize = "16px",
  titleMaxLength = 34,
  messageFontSize = "13px",
  messageMaxLength = 400,
  buttonFontSize = "14px",
  buttonMaxLength = 34,
  cssAnimation = TRUE,
  cssAnimationDuration = 360,
  cssAnimationStyle = c("fade", "zoom"),
  plainText = FALSE,
  width = "280px"
)
}
\arguments{
\item{title}{Title of the report.}

\item{message}{Message of the report.}

\item{button}{Label of the button.}

\item{session}{Shiny session.}

\item{backgroundColor}{Changes the background color.}

\item{borderRadius}{Changes the radius of the corners.}

\item{backOverlay}{If you don't want to use a colored overlay you can change this option to \code{FALSE}.}

\item{backOverlayColor}{Changes the color of the overlay. You can use HEX, RGB or RGBA.}

\item{titleFontSize}{Changes the font-size of the title text.}

\item{titleMaxLength}{Ignores characters of title text after the specified number.}

\item{messageFontSize}{Changes the font-size of the message text.}

\item{messageMaxLength}{Ignores characters of message text after the specified number.}

\item{buttonFontSize}{Changes the font-size of the button text.}

\item{buttonMaxLength}{Ignores characters of button text after the specified number.}

\item{cssAnimation}{Notiflix uses CSS animations to show/hide the Reports.
If you don't want to use CSS animations you can set this option to \code{FALSE}.}

\item{cssAnimationDuration}{Changes the CSS animations duration as milliseconds. Tip: 360 ms = 0.36 second.}

\item{cssAnimationStyle}{2 types of styles you can use: \code{"fade"} and \code{"zoom"}.}

\item{plainText}{Use only plain text (no HTML tags). Default to \code{FALSE}.}

\item{width}{Changes the width. You can use "px" or "\%". Default to \code{"280px"}.}
}
\description{
Initialize with \code{use_notiflix_report} in UI before using \code{nx_report_*} server-side.
}
\note{
Configuration of report is done with \code{use_notiflix_report} in UI per application.
}
\examples{
if (interactive()) {

  library(shiny)

  ui <- fluidPage(
    tags$h2("Reports with notiflix.js"),
    use_notiflix_report(),
    actionButton("success", "Show success", class = "btn-success"),
    actionButton("error", "Show error", class = "btn-danger"),
    actionButton("info", "Show info", class = "btn-info"),
    actionButton("warning", "Show warning", class = "btn-warning")
  )

  server <- function(input, output, session) {

    observeEvent(input$success, {
      nx_report_success("Bravo!", "Everything worked as expected")
    })

    observeEvent(input$error, {
      nx_report_error("Oups...", "Something went wrong")
    })

    observeEvent(input$info, {
      nx_report_info(
        "Notice",
        tags$p(
          style = "text-align: center;",
          "Current version of this package : ",
          tags$b(as.character(packageVersion("shinypop")))
        )
      )
    })

    observeEvent(input$warning, {
      nx_report_warning("Attention !!!", "There's some warnings")
    })

  }

  shinyApp(ui, server)

}
}
