% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/notiflix.R, R/use.R
\name{notiflix-confirm}
\alias{notiflix-confirm}
\alias{nx_confirm}
\alias{use_notiflix_confirm}
\title{Confirm dialog with notiflix.js}
\usage{
nx_confirm(inputId, title, message = NULL, button_ok = "Ok",
  button_cancel = "Cancel",
  session = shiny::getDefaultReactiveDomain())

use_notiflix_confirm(backgroundColor = "#f8f8f8",
  borderRadius = "25px", backOverlay = TRUE,
  backOverlayColor = "rgba(0,0,0,0.5)", titleFontSize = "16px",
  titleMaxLength = 34, messageFontSize = "13px",
  messageMaxLength = 400, buttonsFontSize = "14px",
  buttonsMaxLength = 34, okButtonColor = "#f8f8f8",
  okButtonBackground = "#00b462", cancelButtonColor = "#f8f8f8",
  cancelButtonBackground = "#a9a9a9", cssAnimation = TRUE,
  cssAnimationDuration = 360, cssAnimationStyle = c("fade", "zoom"),
  plainText = FALSE, width = "280px")
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{title}{Title of the dialog.}

\item{message}{Message of the dialog.}

\item{button_ok}{Label for OK button.}

\item{button_cancel}{Label for cancel button.}

\item{session}{Shiny session.}

\item{backgroundColor}{Changes the background color.}

\item{borderRadius}{Changes the radius of the corners.}

\item{backOverlay}{If you don't want to use a colored overlay you can change this option to \code{FALSE}.}

\item{backOverlayColor}{Changes the color of the overlay. You can use HEX, RGB or RGBA.}

\item{titleFontSize}{Changes the font-size of the title text.}

\item{titleMaxLength}{Ignores characters of title text after the specified number.}

\item{messageFontSize}{Changes the font-size of the message text.}

\item{messageMaxLength}{Ignores characters of message text after the specified number.}

\item{buttonsFontSize}{Changes the font-size of the button text.}

\item{buttonsMaxLength}{Ignores characters of button text after the specified number.}

\item{okButtonColor}{Changes the color of the OK button text.}

\item{okButtonBackground}{Changes the background color of the OK button.}

\item{cancelButtonColor}{Changes the color of the CANCEL button text.}

\item{cancelButtonBackground}{Changes the background color of the CANCEL button.}

\item{cssAnimation}{Notiflix uses CSS animations to show/hide the Reports.
If you don't want to use CSS animations you can set this option to \code{FALSE}.}

\item{cssAnimationDuration}{Changes the CSS animations duration as milliseconds. Tip: 360 ms = 0.36 second.}

\item{cssAnimationStyle}{2 types of styles you can use: \code{"fade"} and \code{"zoom"}.}

\item{plainText}{Use only plain text (no HTML tags). Default to \code{FALSE}.}

\item{width}{Changes the width. You can use "px" or "\%". Default to \code{"280px"}.}
}
\description{
Initialize with \code{use_notiflix_confirm} in UI before using \code{nx_confirm} server-side.
 Retrieve value server-side with \code{input$<inputId>}.
}
\note{
Configuration is done with \code{use_notiflix_report} in UI per application.
}
\examples{
if (interactive()) {
  library(shiny)
  
  ui <- fluidPage(
    use_notiflix_confirm(),
    tags$h2("notiflix confirmation pop-up"),
    actionButton("show", "Ask for confirmation"),
    verbatimTextOutput("result")
  )
  
  server <- function(input, output, session) {
    
    observeEvent(input$show, {
      nx_confirm(
        inputId = "confirm",
        title = "Do you want to confirm?",
        message = tags$div(
          tags$b("This is very important !"),
          "You must click one button below !"
        ),
        button_ok = "Sure!",
        button_cancel = "Nope!"
      )
    })
    
    output$result <- renderPrint({
      input$confirm
    })
  }
  
  shinyApp(ui, server)
}
}
