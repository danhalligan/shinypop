% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/notiflix.R, R/use.R
\name{notiflix-notify}
\alias{notiflix-notify}
\alias{nx_notify_success}
\alias{nx_notify_error}
\alias{nx_notify_info}
\alias{nx_notify_warning}
\alias{use_notiflix_notify}
\title{Notification with notiflix.js}
\usage{
nx_notify_success(text, session = shiny::getDefaultReactiveDomain())

nx_notify_error(text, session = shiny::getDefaultReactiveDomain())

nx_notify_info(text, session = shiny::getDefaultReactiveDomain())

nx_notify_warning(text, session = shiny::getDefaultReactiveDomain())

use_notiflix_notify(position = c("right-top", "right-bottom", "left-top",
  "left-bottom"), timeout = 3000, closeButton = FALSE,
  messageMaxLength = 110, width = "280px")
}
\arguments{
\item{text}{Text to display.}

\item{session}{Shiny session.}

\item{position}{Position of notification : \code{"right-top"},
\code{"right-bottom"}, \code{"left-top"}, \code{"left-bottom"}.}

\item{timeout}{Milliseconds to hide the Notifications. Tip: 3000 ms = 3 seconds.}

\item{closeButton}{If you want to add a close button to notifications
you can set this option to \code{TRUE} (Notifications with close
button will not disappear until they are clicked.)}

\item{messageMaxLength}{Ignores characters of the message text after the specified number.}

\item{width}{Changes the width. You can use "px" or "\%". Default to \code{"280px"}.}
}
\description{
Initialize with \code{use_notiflix_notify} in UI before using \code{nx_notify_*} server-side.
}
\note{
Configuration of notification is done with \code{use_notiflix_notify} in UI per application.
}
\examples{
if (interactive()) {
  library(shiny)

  ui <- fluidPage(
    tags$h2("Notification with notiflix.jx"),
    use_notiflix_notify(position = "right-bottom"),
    actionButton("success", "Show success", class = "btn-success"),
    actionButton("error", "Show error", class = "btn-danger"),
    actionButton("info", "Show info", class = "btn-info"),
    actionButton("warning", "Show warning", class = "btn-warning")
  )

  server <- function(input, output, session) {

    observeEvent(input$success, {
      nx_notify_success("Yes :)")
    })

    observeEvent(input$error, {
      nx_notify_error("Oups...")
    })

    observeEvent(input$info, {
      nx_notify_info("For information")
    })

    observeEvent(input$warning, {
      nx_notify_warning("Careful !!!")
    })

  }

  shinyApp(ui, server)
}
}
