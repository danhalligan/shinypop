% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/notiflix.R, R/use.R
\name{notiflix-loading}
\alias{notiflix-loading}
\alias{nx_loading}
\alias{nx_loading_close}
\alias{use_notiflix_loading}
\title{Loading indicator with notiflix.js}
\usage{
nx_loading(
  inputId,
  message = NULL,
  session = shiny::getDefaultReactiveDomain()
)

nx_loading_close(session = shiny::getDefaultReactiveDomain())

use_notiflix_loading(
  backgroundColor = "#f8f8f8",
  messageFontSize = "13px",
  messageMaxLength = 400,
  cssAnimation = TRUE,
  cssAnimationDuration = 360
)
}
\arguments{
\item{message}{Message for loading indicator.}

\item{session}{Shiny session.}

\item{backgroundColor}{Changes the background color.}

\item{messageFontSize}{Changes the font-size of the message text.}

\item{messageMaxLength}{Ignores characters of message text after the specified number.}

\item{cssAnimation}{Notiflix uses CSS animations to show/hide the Reports.
If you don't want to use CSS animations you can set this option to \code{FALSE}.}

\item{cssAnimationDuration}{Changes the CSS animations duration as milliseconds. Tip: 360 ms = 0.36 second.}
}
\description{
Initialize with \code{use_notiflix_loading} in UI before using \code{nx_loading} server-side.
}
\note{
Configuration is done with \code{use_notiflix_loading} in UI per application.
}
\examples{
if (interactive()) {
  library(shiny)

  ui <- fluidPage(
    use_notiflix_loading(),
    tags$h2("notiflix confirmation pop-up"),
    actionButton("load", "Demonstrate loading")
  )

  server <- function(input, output, session) {
    observeEvent(input$show, {
      nx_loading(message = "Loading demo")
      Sys.sleep(5)
      nx_loading_close()
    })
  }

  shinyApp(ui, server)
}
}
